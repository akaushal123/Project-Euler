"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


"""
N = pαqβ· … · rγ
Where p, q, …, r are prime, while α, β, …, γ are positive integers. 
Such representation is unique up to the order of the prime factors.
If N is a power of a prime, N = pα, then it has α + 1 factors:
1, p, …, pα-1, pα
The total number of factors of N equals (α + 1)(β + 1) … (γ + 1)

500 = 2 x 2 x 5 x 5 x 5
So, the number in question should be of the form abq4r4s4 where a, b, q, r, s are primes that minimize abq4r4s4. 
This is satisfied by 7x11x24x34x54 = 62370000. This marks the end of the First Step which is where we start our 
search for our magic number.
"""
import math

def count_divisor(n):
    limit = int(math.sqrt(n))
    divisor = []
    for i in range(1, limit + 1, 1):
        if n % i == 0:
            divisor.append(i)
            if i != n / i:
                divisor.append(n / i)

    return len(divisor)


def is_triangular_number(n):
    x = int(math.sqrt(2 * n))
    return 0.5 * x * (x + 1) == n


def last_term(n):
    if is_triangular_number(n):
        return int(math.sqrt(2 * n))
    else:
        return None


def highly_divisible_triangular_number():
    required_number = 2**4 * 3**4 * 5**4 * 7 * 11

    while not is_triangular_number(required_number):
        required_number += 1

    last_series_term = last_term(required_number)
    
    while count_divisor(required_number) <= 500:
        required_number += (last_series_term + 1)
        last_series_term += 1

    return required_number


if __name__ == "__main__":
    print(highly_divisible_triangular_number())
